#!/usr/bin/env python3

import sys
import os
import glob
from itertools import islice, chain
import argparse
import getpass
try:
    import requests
except:
    print("ERROR - You need to install requests: pip install requests")
    # TODO python 3.5
    sys.exit(-1)

assert sys.version_info[0] == 3, "This script requires Python 3"


# CHANGE TO YOUR INSTALLATION'S URL INCLUDING THE PORT NUMBER -- Example: http://localhost:9000/
__default_domain__ = "https://www.tagtog.net/"

__author__ = "tagtog (@tagtog_net) - Contact: Juan Miguel Cejuela (@juanmirocks)"
__version__ = "0.0.1"
__doc__ = \
    """
    tagtog official script to Upload & Search & Download documents.

    Version: {}
    Author: {}
    API documentation: https://github.com/tagtog/tagtog-doc/wiki/API-documents-v0.1
    """.format(__version__, __author__)


def parse_arguments(argv=[]):
    parser = argparse.ArgumentParser(prog="tagtog", description=__doc__)
    subparsers = parser.add_subparsers(dest="action")

    # -----------------------------------------------------------------------------------------------------------------

    def add_common_arguments(parser, default_output):
        parser.add_argument("--domain", default=__default_domain__, help="tagtog domain, e.g. http://localhost:9000/")
        parser.add_argument("--entrypoint", default="api/0.1/documents")

        parser.add_argument('--user', required=True, help="tagtog username making the request")
        parser.add_argument('--password', default=None, help="User's password -- if not given, the password is prompted")
        parser.add_argument("--owner", help="Project owner in tagtog -- defaults to the user")
        parser.add_argument("--project", required=True, help="Project name in tagtog to operate on")

        parser.add_argument("--output", default=default_output, help="Output type of tagtog's response")

        return parser

    # -----------------------------------------------------------------------------------------------------------------

    upload_parser = subparsers.add_parser("upload", help='Upload files to tagtog')
    upload_parser = add_common_arguments(upload_parser, default_output="null")
    upload_parser.set_defaults(func=print_upload)

    upload_parser.add_argument("paths", nargs="+", help="paths of files or folders containing (recursively) the files to upload")

    # -----------------------------------------------------------------------------------------------------------------

    search_parser = subparsers.add_parser("search", help='Search documents by query, e.g. `*` (all)')
    search_parser = add_common_arguments(search_parser, default_output="search")
    search_parser.set_defaults(func=print_search)

    search_parser.add_argument("search", nargs="+", help="search query")

    # -----------------------------------------------------------------------------------------------------------------

    downld_parser = subparsers.add_parser("download", help='Download documents by search query, e.g. `updated:[NOW-1DAY to NOW]')
    downld_parser = add_common_arguments(downld_parser, default_output="ann.json")
    downld_parser.set_defaults(func=print_download)

    downld_parser.add_argument("search", nargs="+", help="search query")
    downld_parser.add_argument("--folder", default=".", help="search query")

    # -----------------------------------------------------------------------------------------------------------------

    args = parser.parse_args(argv)

    if args.action is None:
        parser.print_help()
        sys.exit(-1)

    if not args.domain.endswith("/"):
        args.domain += "/"

    if args.password is None:
        args.password = getpass.getpass(prompt="tagtog password: ")

    if args.owner is None:
        args.owner = args.user

    args.req_url = args.domain + args.entrypoint
    args.req_auth = requests.auth.HTTPBasicAuth(username=args.user, password=args.password)
    args.password = None  # Hide
    args.req_params = {"owner": args.owner, "project": args.project, "output": args.output}

    # -----------------------------------------------------------------------------------------------------------------

    if args.action in ["search", "download"]:
        args.search = " ".join(args.search)
        args.req_params["search"] = args.search

    # -----------------------------------------------------------------------------------------------------------------

    return args


def print_upload(args):
    filepath_iterator = gen_filepaths_generator(args.paths)

    BATCH_SIZE = 10
    MAX_NUM_CONSECUTIVE_ERRORS = 3

    num_consecutive_errors = 0

    batch_index = 0
    while True:
        batch_index += 1
        batch = islice(filepath_iterator, BATCH_SIZE)
        first = next(batch, None)
        if first is None:
            return
        else:
            batch = chain([first], batch)

        files = []
        filepaths = []
        for filepath in batch:
            filepaths.append(filepath)
            files.append(("files", open(filepath, "rb")))

        response = requests.put(args.req_url, params=args.req_params, auth=args.req_auth, files=files)
        print("batch", batch_index, response.status_code, response.reason, "--", response.text)

        if response.ok:
            num_consecutive_errors = 0

        else:
            print("\tERROR; could not upload the files:", filepaths)

            num_consecutive_errors += 1
            if num_consecutive_errors == MAX_NUM_CONSECUTIVE_ERRORS:
                print("FATAL; too many consecutive failed requireds")
                sys.exit(-1)


def gen_filepaths_generator(paths):
    generator = []
    for path in paths:
        generator = chain(generator, gen_filespath_generator(path))
    return generator


def gen_filespath_generator(path):
    if os.path.isfile(path):
        return [path]
    elif os.path.isdir(path):
        return (subpath for subpath in glob.iglob(path + "/**", recursive=True) if os.path.isfile(subpath))
    else:
        print("warning, cannot read:", path)
        return []  # resilient


# -----------------------------------------------------------------------------------------------------------------


def print_search(args):
    (json, response) = search(args)

    if json:
        print(json)
    else:
        print("ERROR;", response.status_code, response.reason)


def search(args):
    response = requests.put(args.req_url, params=args.req_params, auth=args.req_auth)

    if response.ok:
        return (response.json(), response)
    else:
        return (None, response)


# -----------------------------------------------------------------------------------------------------------------


def print_download(args):
    next_page = 0
    while next_page != 1:
        (json, response) = search(args)

        if json:
            ???

def search(args):
    response = requests.put(args.req_url, params=args.req_params, auth=args.req_auth)

    if response.ok:
        return (response.json(), response)
    else:
        return (None, response)

# -----------------------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    args = parse_arguments(sys.argv[1:])
    print("Domain:", args.domain)
    print()
    args.func(args)
